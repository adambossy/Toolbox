#!/usr/bin/env bash
set -euo pipefail

# dot-sync: sync dotfiles between $HOME and this repo
# Tracks:
#   ~/.vimrc
#   ~/.bashrc
#   ~/.gitconfig
#   ~/.local/bin/{ai-commit,git-clean-local-branches,git-clean-rebase}

# -------------------------------------------------------------------
# Repo dir = directory containing this script
# -------------------------------------------------------------------
if [[ -z "${DOTSYNC_REPO:-}" ]]; then
  DOTSYNC_REPO="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
  export DOTSYNC_REPO
fi
HOME_DIR="$HOME"
REPO_DIR="$DOTSYNC_REPO"

FILES=(
  ".vimrc"
  ".bashrc"
  ".gitconfig"
  ".local/bin/ai-commit"
  ".local/bin/git-clean-local-branches"
  ".local/bin/git-clean-rebase"
)

usage() {
  cat <<EOF
dot-sync — sync a handful of dotfiles between \$HOME and this git repo.

Usage:
  dot-sync status|diff    Show differences (repo vs local)
  dot-sync pull           Copy repo -> local (backup changed targets)
  dot-sync push           Copy local -> repo (mkdir as needed), then auto-commit with ai-commit
EOF
}

# -------------------------------------------------------------------
# Helpers
# -------------------------------------------------------------------
log() { printf "[dot-sync] %s\n" "$*"; }
backup_if_changed() {
  local target="$1" src="$2"
  if [[ -e "$target" ]] && ! cmp -s "$target" "$src"; then
    local ts; ts="$(date +%Y%m%d-%H%M%S)"
    cp -p "$target" "${target}.bak.${ts}"
    log "Backed up: $target"
  fi
}
ensure_parent() { mkdir -p "$(dirname "$1")"; }

copy_repo_to_local() {
  local rel="$1"
  local src="$REPO_DIR/$rel" dst="$HOME_DIR/$rel"
  [[ -e "$src" ]] || { log "Repo missing $rel (skip)"; return; }
  ensure_parent "$dst"
  backup_if_changed "$dst" "$src"
  cp -fp "$src" "$dst"
  [[ "$rel" == .local/bin/* ]] && chmod +x "$dst"
  log "Repo → Local: $rel"
}
copy_local_to_repo() {
  local rel="$1"
  local src="$HOME_DIR/$rel" dst="$REPO_DIR/$rel"
  [[ -e "$src" ]] || { log "Local missing $rel (skip)"; return; }
  ensure_parent "$dst"
  cp -fp "$src" "$dst"
  log "Local → Repo: $rel"
}

do_status() {
  local ret=0
  for rel in "${FILES[@]}"; do
    local l="$HOME_DIR/$rel" r="$REPO_DIR/$rel"
    if [[ -e "$l" && -e "$r" ]]; then
      if ! cmp -s "$l" "$r"; then
        echo "diff -- $rel"
        diff -u "$r" "$l" || true
        ret=1
      fi
    elif [[ -e "$l" && ! -e "$r" ]]; then
      echo "only-in-local: $rel"; ret=1
    elif [[ ! -e "$l" && -e "$r" ]]; then
      echo "only-in-repo:  $rel"; ret=1
    else
      echo "missing-both:  $rel"
    fi
  done
  return $ret
}

do_pull() { for rel in "${FILES[@]}"; do copy_repo_to_local "$rel"; done; }

do_push() {
  for rel in "${FILES[@]}"; do copy_local_to_repo "$rel"; done
  log "Push complete."
  if [[ -x "$REPO_DIR/.local/bin/ai-commit" ]]; then
    (cd "$REPO_DIR" && git add -A && "$REPO_DIR/.local/bin/ai-commit")
    log "Auto-commit done using ai-commit"
  else
    log "ai-commit not found or not executable in repo; skipping commit."
  fi
}

# -------------------------------------------------------------------
# Commands
# -------------------------------------------------------------------
cmd="${1:-}"
case "$cmd" in
  status|diff) do_status;;
  pull) do_pull;;
  push) do_push;;
  -h|--help|"") usage;;
  *) echo "Unknown: $cmd" >&2; usage; exit 1;;
esac

